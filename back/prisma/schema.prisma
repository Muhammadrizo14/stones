// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Stone {
  id                 Int            @id @default(autoincrement())
  title              String
  country            String?
  radioactivityClass String?
  waterAbsorption    String?
  density            String?
  mohsHardness       String?
  structure          Boolean?
  abrasion           String?
  otherNames         String?
  similarGranites    String?
  variants           Json?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt()
  category           Category?      @relation(fields: [categoryTitle], references: [title])
  categoryTitle      String?
  uploadedFile       UploadedFile[]
}

model Reviews {
  id        Int      @id @default(autoincrement())
  name      String
  comment   String   @db.Text
  rate      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Services {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  serviceTitle String
  info         String         @db.Text
  uploadedFile UploadedFile[]
}

model Blog {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  blogUrl      String?
  createdAt    DateTime       @default(now())
  uploadedFile UploadedFile[]
}

model Circlestone {
  id           Int            @id @default(autoincrement())
  page         String
  uploadedFile UploadedFile[]
}

model UploadedFile {
  id           Int      @id @default(autoincrement())
  fieldname    String
  originalname String
  encoding     String
  mimetype     String
  destination  String
  filename     String   @unique
  path         String
  size         Int
  createdAt    DateTime @default(now())

  updatedAt     DateTime     @updatedAt()
  deletedAt     DateTime?
  services      Services?    @relation(fields: [serviceTitle], references: [title], onDelete: Cascade)
  serviceTitle  String?
  circlestone   Circlestone? @relation(fields: [circlestoneId], references: [id])
  circlestoneId Int?
  Stone         Stone?       @relation(fields: [stoneId], references: [id])
  stoneId       Int?
  Blog          Blog?       @relation(fields: [blogId], references: [id])
  blogId        Int?
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}


model Category {
  id       Int    @id @default(autoincrement())
  title String @unique
  stone Stone[]
  
}
